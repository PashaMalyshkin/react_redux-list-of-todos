{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","initialState","query","status","filterReducer","todos","error","loading","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","todoStatus","filteredTodos","title","includes","completed","length","className","map","id","cn","onClick","TodoFilter","useState","filterQuery","setFilterQuery","filterStatus","setFilterStatus","useEffect","onSubmit","event","preventDefault","value","onChange","e","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","user","setUser","loadUser","a","userId","userFromServer","href","email","name","App","todosFromServer","catch","finally","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.95bf0839.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","const initialState = {\n  query: '',\n  status: 'all',\n};\n\ntype QueryAction = {\n  type: 'filter/QUERY',\n  payload: string,\n};\n\ntype StatusAction = {\n  type: 'filter/STATUS',\n  payload: string,\n};\n\nconst setQuery = (query: string): QueryAction => ({\n  type: 'filter/QUERY',\n  payload: query,\n});\n\nconst setStatus = (status: string): StatusAction => ({\n  type: 'filter/STATUS',\n  payload: status,\n});\n\ntype FilterAction = QueryAction | StatusAction;\n\ntype State = {\n  query: string,\n  status: string,\n};\n\nconst filterReducer = (\n  state = initialState,\n  action: FilterAction,\n): State => {\n  switch (action.type) {\n    case 'filter/QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n    case 'filter/STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\nexport const actions = { setQuery, setStatus };\n","import { Todo } from '../types/Todo';\n\ntype TodosState = {\n  todos: Todo[],\n  loading: boolean,\n  error: string,\n};\n\ntype SetTodosAction = {\n  type: 'todos/SET',\n  payload: Todo[],\n};\n\ntype SetLoadingAction = {\n  type: 'todos/LOADING',\n  payload: boolean,\n};\n\ntype SetErrorAction = {\n  type: 'todos/ERROR',\n  payload: string,\n};\n\nconst setTodos = (todos: Todo[]) : SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nconst setTodosLoading = (status: boolean): SetLoadingAction => ({\n  type: 'todos/LOADING',\n  payload: status,\n});\n\nconst setTodosError = (error: string): SetErrorAction => ({\n  type: 'todos/ERROR',\n  payload: error,\n});\n\nexport const actions = { setTodos, setTodosLoading, setTodosError };\n\nconst initialState = {\n  todos: [],\n  loading: false,\n  error: '',\n};\n\ntype TodosAction = SetTodosAction | SetLoadingAction | SetErrorAction;\nconst todosReducer = (\n  state: TodosState = initialState,\n  action: TodosAction,\n): TodosState => {\n  switch (action.type) {\n    case 'todos/SET':\n      return {\n        ...state,\n        todos: action.payload,\n      };\n    case 'todos/LOADING':\n      return {\n        ...state,\n        loading: action.payload,\n      };\n    case 'todos/ERROR':\n      return {\n        ...state,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\n\ninterface Props {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const { query, status } = useAppSelector(state => state.filter);\n  const { loading } = useAppSelector(state => state.todos);\n  const dispatch = useAppDispatch();\n\n  let todoStatus: boolean | null = null;\n\n  const filteredTodos = todos.filter(todo => {\n    switch (status) {\n      case 'completed':\n        todoStatus = true;\n        break;\n      case 'active':\n        todoStatus = false;\n        break;\n      default:\n        todoStatus = null;\n    }\n\n    return todo.title.includes(query)\n      && (todo.completed === todoStatus || status === 'all');\n  });\n\n  return (\n    <>\n      {loading || filteredTodos.length ? (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {filteredTodos.map(todo => (\n              <tr\n                data-cy=\"todo\"\n                key={todo.id}\n              >\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\"><i className=\"fas fa-check\" /></span>\n                  )}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p\n                    className={cn(\n                      { 'has-text-success': todo.completed },\n                      { 'has-text-danger': !todo.completed },\n                    )}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => dispatch(actions.setTodo(todo))}\n                  >\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye\" />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n    </>\n  );\n};\n","import { FC, useEffect, useState } from 'react';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions } from '../../features/filter';\n\nexport const TodoFilter: FC = () => {\n  const [filterQuery, setFilterQuery] = useState('');\n  const [filterStatus, setFilterStatus] = useState('all');\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(actions.setStatus(filterStatus));\n    dispatch(actions.setQuery(filterQuery));\n  }, [filterQuery, filterStatus]);\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterStatus}\n            onChange={(e) => setFilterStatus(e.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={filterQuery}\n          onChange={(e) => (\n            setFilterQuery(e.target.value)\n          )}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => setFilterQuery('')}\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { actions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const todo = useAppSelector(state => state.currentTodo);\n  const [user, setUser] = useState<User | null>(null);\n  const dispatch = useAppDispatch();\n\n  const loadUser = async () => {\n    if (!todo) {\n      return;\n    }\n\n    const userFromServer = await getUser(todo.userId);\n\n    setUser(userFromServer);\n  };\n\n  useEffect(() => {\n    loadUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(actions.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{todo?.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {' by '}\n              <a href={`mailto:${user?.email}`}>{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const { todos, loading } = useAppSelector(state => state.todos);\n  const dispatch = useAppDispatch();\n  const todo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    dispatch(actions.setTodosLoading(true));\n    getTodos()\n      .then(todosFromServer => (\n        dispatch(actions.setTodos(todosFromServer))\n      ))\n      .catch(() => (\n        dispatch(actions.setTodosError('Unable to load Todos'))\n      ))\n      .finally(() => (\n        dispatch(actions.setTodosLoading(false))\n      ));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {loading ? (\n                <Loader />\n              ) : (\n                <TodoList todos={todos} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {todo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}